<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/demo2/controller/AuthService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/demo2/controller/AuthService.java" />
              <option name="originalContent" value="package com.example.demo2.service;&#10;&#10;import com.example.demo2.dto.UserDTO;&#10;import com.example.demo2.entity.User;&#10;import com.example.demo2.entity.Patient;&#10;import com.example.demo2.enums.UserRole;&#10;import com.example.demo2.repository.UserRepository;&#10;import com.example.demo2.util.PasswordUtil;&#10;&#10;import java.util.Optional;&#10;import java.util.UUID;&#10;&#10;public class AuthService {&#10;    &#10;    private final UserRepository userRepository;&#10;    &#10;    public AuthService() {&#10;        this.userRepository = new UserRepository();&#10;    }&#10;    &#10;    /**&#10;     * Authenticate user with email and password&#10;     */&#10;    public UserDTO login(String email, String password) {&#10;        Optional&lt;User&gt; userOpt = userRepository.findByEmail(email);&#10;        &#10;        if (userOpt.isEmpty()) {&#10;            return null;&#10;        }&#10;        &#10;        User user = userOpt.get();&#10;        &#10;        // Check if user is active&#10;        if (!user.isActif()) {&#10;            throw new IllegalStateException(&quot;Account is deactivated. Please contact administrator.&quot;);&#10;        }&#10;        &#10;        // Verify password&#10;        if (!PasswordUtil.verifyPassword(password, user.getPassword())) {&#10;            return null;&#10;        }&#10;        &#10;        // Return user DTO&#10;        return convertToDTO(user);&#10;    }&#10;    &#10;    /**&#10;     * Register a new patient&#10;     */&#10;    public boolean registerPatient(String nom, String email, String password, String cin) {&#10;        if (userRepository.existsByEmail(email)) {&#10;            throw new IllegalArgumentException(&quot;Email already exists&quot;);&#10;        }&#10;        &#10;        Patient patient = new Patient();&#10;        patient.setNom(nom);&#10;        patient.setEmail(email);&#10;        patient.setPassword(PasswordUtil.hashPassword(password));&#10;        patient.setCin(cin);&#10;        patient.setRole(UserRole.PATIENT);&#10;        patient.setActif(true);&#10;        &#10;        userRepository.save(patient);&#10;        return true;&#10;    }&#10;    &#10;    /**&#10;     * Change password&#10;     */&#10;    public boolean changePassword(UUID userId, String oldPassword, String newPassword) {&#10;        Optional&lt;User&gt; userOpt = userRepository.findById(userId);&#10;        &#10;        if (userOpt.isEmpty()) {&#10;            return false;&#10;        }&#10;        &#10;        User user = userOpt.get();&#10;        &#10;        // Verify old password&#10;        if (!PasswordUtil.verifyPassword(oldPassword, user.getPassword())) {&#10;            return false;&#10;        }&#10;        &#10;        // Update with new password&#10;        user.setPassword(PasswordUtil.hashPassword(newPassword));&#10;        userRepository.update(user);&#10;        &#10;        return true;&#10;    }&#10;    &#10;    /**&#10;     * Check database connectivity&#10;     */&#10;    public boolean testDatabaseConnection() {&#10;        try {&#10;            userRepository.findAll();&#10;            return true;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Database connection failed: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Convert User entity to UserDTO&#10;     */&#10;    private UserDTO convertToDTO(User user) {&#10;        UserDTO dto = new UserDTO();&#10;        dto.setId(user.getId());&#10;        dto.setNom(user.getNom());&#10;        dto.setEmail(user.getEmail());&#10;        dto.setRole(user.getRole());&#10;        dto.setActif(user.isActif());&#10;        return dto;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.demo2.controller;&#10;&#10;import com.example.demo2.dto.UserDTO;&#10;import com.example.demo2.entity.User;&#10;import com.example.demo2.entity.Patient;&#10;import com.example.demo2.enums.UserRole;&#10;import com.example.demo2.repository.UserRepository;&#10;import com.example.demo2.util.PasswordUtil;&#10;&#10;import java.util.Optional;&#10;import java.util.UUID;&#10;&#10;public class AuthService {&#10;    &#10;    private final UserRepository userRepository;&#10;    &#10;    public AuthService() {&#10;        this.userRepository = new UserRepository();&#10;    }&#10;    &#10;    /**&#10;     * Authenticate user with email and password&#10;     */&#10;    public UserDTO login(String email, String password) {&#10;        Optional&lt;User&gt; userOpt = userRepository.findByEmail(email);&#10;        &#10;        if (userOpt.isEmpty()) {&#10;            return null;&#10;        }&#10;        &#10;        User user = userOpt.get();&#10;        &#10;        // Check if user is active&#10;        if (!user.isActif()) {&#10;            throw new IllegalStateException(&quot;Account is deactivated. Please contact administrator.&quot;);&#10;        }&#10;        &#10;        // Verify password&#10;        if (!PasswordUtil.verifyPassword(password, user.getPassword())) {&#10;            return null;&#10;        }&#10;        &#10;        // Return user DTO&#10;        return convertToDTO(user);&#10;    }&#10;    &#10;    /**&#10;     * Register a new patient&#10;     */&#10;    public boolean registerPatient(String nom, String email, String password, String cin) {&#10;        if (userRepository.existsByEmail(email)) {&#10;            throw new IllegalArgumentException(&quot;Email already exists&quot;);&#10;        }&#10;        &#10;        Patient patient = new Patient();&#10;        patient.setNom(nom);&#10;        patient.setEmail(email);&#10;        patient.setPassword(PasswordUtil.hashPassword(password));&#10;        patient.setCin(cin);&#10;        patient.setRole(UserRole.PATIENT);&#10;        patient.setActif(true);&#10;        &#10;        userRepository.save(patient);&#10;        return true;&#10;    }&#10;    &#10;    /**&#10;     * Change password&#10;     */&#10;    public boolean changePassword(UUID userId, String oldPassword, String newPassword) {&#10;        Optional&lt;User&gt; userOpt = userRepository.findById(userId);&#10;        &#10;        if (userOpt.isEmpty()) {&#10;            return false;&#10;        }&#10;        &#10;        User user = userOpt.get();&#10;        &#10;        // Verify old password&#10;        if (!PasswordUtil.verifyPassword(oldPassword, user.getPassword())) {&#10;            return false;&#10;        }&#10;        &#10;        // Update with new password&#10;        user.setPassword(PasswordUtil.hashPassword(newPassword));&#10;        userRepository.update(user);&#10;        &#10;        return true;&#10;    }&#10;    &#10;    /**&#10;     * Check database connectivity&#10;     */&#10;    public boolean testDatabaseConnection() {&#10;        try {&#10;            userRepository.findAll();&#10;            return true;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Database connection failed: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Convert User entity to UserDTO&#10;     */&#10;    private UserDTO convertToDTO(User user) {&#10;        UserDTO dto = new UserDTO();&#10;        dto.setId(user.getId());&#10;        dto.setNom(user.getNom());&#10;        dto.setEmail(user.getEmail());&#10;        dto.setRole(user.getRole());&#10;        dto.setActif(user.isActif());&#10;        return dto;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>